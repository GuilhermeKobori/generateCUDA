cudaError_t cudaStatus;
float Mdm2 = 5.000000;
float* dev_Mdm2;
cudaStatus = cudaMalloc(&dev_Mdm2, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Mdm2, &Mdm2, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Mdm2_results;
Mdm2_results = (float*)malloc(1000*sizeof(float));
float* dev_Mdm2_results;
cudaStatus = cudaMalloc(&dev_Mdm2_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float p53 = 5.000000;
float* dev_p53;
cudaStatus = cudaMalloc(&dev_p53, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_p53, &p53, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* p53_results;
p53_results = (float*)malloc(1000*sizeof(float));
float* dev_p53_results;
cudaStatus = cudaMalloc(&dev_p53_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float Mdm2_p53 = 95.000000;
float* dev_Mdm2_p53;
cudaStatus = cudaMalloc(&dev_Mdm2_p53, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Mdm2_p53, &Mdm2_p53, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Mdm2_p53_results;
Mdm2_p53_results = (float*)malloc(1000*sizeof(float));
float* dev_Mdm2_p53_results;
cudaStatus = cudaMalloc(&dev_Mdm2_p53_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float Mdm2_mRNA = 10.000000;
float* dev_Mdm2_mRNA;
cudaStatus = cudaMalloc(&dev_Mdm2_mRNA, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Mdm2_mRNA, &Mdm2_mRNA, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Mdm2_mRNA_results;
Mdm2_mRNA_results = (float*)malloc(1000*sizeof(float));
float* dev_Mdm2_mRNA_results;
cudaStatus = cudaMalloc(&dev_Mdm2_mRNA_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float p53_mRNA = 10.000000;
float* dev_p53_mRNA;
cudaStatus = cudaMalloc(&dev_p53_mRNA, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_p53_mRNA, &p53_mRNA, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* p53_mRNA_results;
p53_mRNA_results = (float*)malloc(1000*sizeof(float));
float* dev_p53_mRNA_results;
cudaStatus = cudaMalloc(&dev_p53_mRNA_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float ATMA = 0.000000;
float* dev_ATMA;
cudaStatus = cudaMalloc(&dev_ATMA, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_ATMA, &ATMA, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* ATMA_results;
ATMA_results = (float*)malloc(1000*sizeof(float));
float* dev_ATMA_results;
cudaStatus = cudaMalloc(&dev_ATMA_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float ATMI = 200.000000;
float* dev_ATMI;
cudaStatus = cudaMalloc(&dev_ATMI, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_ATMI, &ATMI, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* ATMI_results;
ATMI_results = (float*)malloc(1000*sizeof(float));
float* dev_ATMI_results;
cudaStatus = cudaMalloc(&dev_ATMI_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float p53_P = 0.000000;
float* dev_p53_P;
cudaStatus = cudaMalloc(&dev_p53_P, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_p53_P, &p53_P, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* p53_P_results;
p53_P_results = (float*)malloc(1000*sizeof(float));
float* dev_p53_P_results;
cudaStatus = cudaMalloc(&dev_p53_P_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float Mdm2_P = 0.000000;
float* dev_Mdm2_P;
cudaStatus = cudaMalloc(&dev_Mdm2_P, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Mdm2_P, &Mdm2_P, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Mdm2_P_results;
Mdm2_P_results = (float*)malloc(1000*sizeof(float));
float* dev_Mdm2_P_results;
cudaStatus = cudaMalloc(&dev_Mdm2_P_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float IR = 0.000000;
float* dev_IR;
cudaStatus = cudaMalloc(&dev_IR, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_IR, &IR, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* IR_results;
IR_results = (float*)malloc(1000*sizeof(float));
float* dev_IR_results;
cudaStatus = cudaMalloc(&dev_IR_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float ROS = 0.000000;
float* dev_ROS;
cudaStatus = cudaMalloc(&dev_ROS, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_ROS, &ROS, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* ROS_results;
ROS_results = (float*)malloc(1000*sizeof(float));
float* dev_ROS_results;
cudaStatus = cudaMalloc(&dev_ROS_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float damDNA = 0.000000;
float* dev_damDNA;
cudaStatus = cudaMalloc(&dev_damDNA, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_damDNA, &damDNA, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* damDNA_results;
damDNA_results = (float*)malloc(1000*sizeof(float));
float* dev_damDNA_results;
cudaStatus = cudaMalloc(&dev_damDNA_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float E1 = 100.000000;
float* dev_E1;
cudaStatus = cudaMalloc(&dev_E1, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_E1, &E1, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* E1_results;
E1_results = (float*)malloc(1000*sizeof(float));
float* dev_E1_results;
cudaStatus = cudaMalloc(&dev_E1_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float E2 = 100.000000;
float* dev_E2;
cudaStatus = cudaMalloc(&dev_E2, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_E2, &E2, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* E2_results;
E2_results = (float*)malloc(1000*sizeof(float));
float* dev_E2_results;
cudaStatus = cudaMalloc(&dev_E2_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float E1_Ub = 0.000000;
float* dev_E1_Ub;
cudaStatus = cudaMalloc(&dev_E1_Ub, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_E1_Ub, &E1_Ub, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* E1_Ub_results;
E1_Ub_results = (float*)malloc(1000*sizeof(float));
float* dev_E1_Ub_results;
cudaStatus = cudaMalloc(&dev_E1_Ub_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float E2_Ub = 0.000000;
float* dev_E2_Ub;
cudaStatus = cudaMalloc(&dev_E2_Ub, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_E2_Ub, &E2_Ub, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* E2_Ub_results;
E2_Ub_results = (float*)malloc(1000*sizeof(float));
float* dev_E2_Ub_results;
cudaStatus = cudaMalloc(&dev_E2_Ub_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float Proteasome = 500.000000;
float* dev_Proteasome;
cudaStatus = cudaMalloc(&dev_Proteasome, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Proteasome, &Proteasome, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Proteasome_results;
Proteasome_results = (float*)malloc(1000*sizeof(float));
float* dev_Proteasome_results;
cudaStatus = cudaMalloc(&dev_Proteasome_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float Ub = 4000.000000;
float* dev_Ub;
cudaStatus = cudaMalloc(&dev_Ub, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Ub, &Ub, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Ub_results;
Ub_results = (float*)malloc(1000*sizeof(float));
float* dev_Ub_results;
cudaStatus = cudaMalloc(&dev_Ub_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float p53DUB = 200.000000;
float* dev_p53DUB;
cudaStatus = cudaMalloc(&dev_p53DUB, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_p53DUB, &p53DUB, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* p53DUB_results;
p53DUB_results = (float*)malloc(1000*sizeof(float));
float* dev_p53DUB_results;
cudaStatus = cudaMalloc(&dev_p53DUB_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float Mdm2DUB = 200.000000;
float* dev_Mdm2DUB;
cudaStatus = cudaMalloc(&dev_Mdm2DUB, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Mdm2DUB, &Mdm2DUB, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Mdm2DUB_results;
Mdm2DUB_results = (float*)malloc(1000*sizeof(float));
float* dev_Mdm2DUB_results;
cudaStatus = cudaMalloc(&dev_Mdm2DUB_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float DUB = 200.000000;
float* dev_DUB;
cudaStatus = cudaMalloc(&dev_DUB, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_DUB, &DUB, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* DUB_results;
DUB_results = (float*)malloc(1000*sizeof(float));
float* dev_DUB_results;
cudaStatus = cudaMalloc(&dev_DUB_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float Mdm2_p53_Ub = 0.000000;
float* dev_Mdm2_p53_Ub;
cudaStatus = cudaMalloc(&dev_Mdm2_p53_Ub, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Mdm2_p53_Ub, &Mdm2_p53_Ub, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Mdm2_p53_Ub_results;
Mdm2_p53_Ub_results = (float*)malloc(1000*sizeof(float));
float* dev_Mdm2_p53_Ub_results;
cudaStatus = cudaMalloc(&dev_Mdm2_p53_Ub_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float Mdm2_p53_Ub2 = 0.000000;
float* dev_Mdm2_p53_Ub2;
cudaStatus = cudaMalloc(&dev_Mdm2_p53_Ub2, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Mdm2_p53_Ub2, &Mdm2_p53_Ub2, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Mdm2_p53_Ub2_results;
Mdm2_p53_Ub2_results = (float*)malloc(1000*sizeof(float));
float* dev_Mdm2_p53_Ub2_results;
cudaStatus = cudaMalloc(&dev_Mdm2_p53_Ub2_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float Mdm2_p53_Ub3 = 0.000000;
float* dev_Mdm2_p53_Ub3;
cudaStatus = cudaMalloc(&dev_Mdm2_p53_Ub3, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Mdm2_p53_Ub3, &Mdm2_p53_Ub3, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Mdm2_p53_Ub3_results;
Mdm2_p53_Ub3_results = (float*)malloc(1000*sizeof(float));
float* dev_Mdm2_p53_Ub3_results;
cudaStatus = cudaMalloc(&dev_Mdm2_p53_Ub3_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float Mdm2_p53_Ub4 = 0.000000;
float* dev_Mdm2_p53_Ub4;
cudaStatus = cudaMalloc(&dev_Mdm2_p53_Ub4, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Mdm2_p53_Ub4, &Mdm2_p53_Ub4, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Mdm2_p53_Ub4_results;
Mdm2_p53_Ub4_results = (float*)malloc(1000*sizeof(float));
float* dev_Mdm2_p53_Ub4_results;
cudaStatus = cudaMalloc(&dev_Mdm2_p53_Ub4_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float Mdm2_P1_p53_Ub4 = 0.000000;
float* dev_Mdm2_P1_p53_Ub4;
cudaStatus = cudaMalloc(&dev_Mdm2_P1_p53_Ub4, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Mdm2_P1_p53_Ub4, &Mdm2_P1_p53_Ub4, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Mdm2_P1_p53_Ub4_results;
Mdm2_P1_p53_Ub4_results = (float*)malloc(1000*sizeof(float));
float* dev_Mdm2_P1_p53_Ub4_results;
cudaStatus = cudaMalloc(&dev_Mdm2_P1_p53_Ub4_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float Mdm2_Ub = 0.000000;
float* dev_Mdm2_Ub;
cudaStatus = cudaMalloc(&dev_Mdm2_Ub, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Mdm2_Ub, &Mdm2_Ub, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Mdm2_Ub_results;
Mdm2_Ub_results = (float*)malloc(1000*sizeof(float));
float* dev_Mdm2_Ub_results;
cudaStatus = cudaMalloc(&dev_Mdm2_Ub_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float Mdm2_Ub2 = 0.000000;
float* dev_Mdm2_Ub2;
cudaStatus = cudaMalloc(&dev_Mdm2_Ub2, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Mdm2_Ub2, &Mdm2_Ub2, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Mdm2_Ub2_results;
Mdm2_Ub2_results = (float*)malloc(1000*sizeof(float));
float* dev_Mdm2_Ub2_results;
cudaStatus = cudaMalloc(&dev_Mdm2_Ub2_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float Mdm2_Ub3 = 0.000000;
float* dev_Mdm2_Ub3;
cudaStatus = cudaMalloc(&dev_Mdm2_Ub3, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Mdm2_Ub3, &Mdm2_Ub3, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Mdm2_Ub3_results;
Mdm2_Ub3_results = (float*)malloc(1000*sizeof(float));
float* dev_Mdm2_Ub3_results;
cudaStatus = cudaMalloc(&dev_Mdm2_Ub3_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float Mdm2_Ub4 = 0.000000;
float* dev_Mdm2_Ub4;
cudaStatus = cudaMalloc(&dev_Mdm2_Ub4, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Mdm2_Ub4, &Mdm2_Ub4, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Mdm2_Ub4_results;
Mdm2_Ub4_results = (float*)malloc(1000*sizeof(float));
float* dev_Mdm2_Ub4_results;
cudaStatus = cudaMalloc(&dev_Mdm2_Ub4_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float Mdm2_P_Ub = 0.000000;
float* dev_Mdm2_P_Ub;
cudaStatus = cudaMalloc(&dev_Mdm2_P_Ub, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Mdm2_P_Ub, &Mdm2_P_Ub, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Mdm2_P_Ub_results;
Mdm2_P_Ub_results = (float*)malloc(1000*sizeof(float));
float* dev_Mdm2_P_Ub_results;
cudaStatus = cudaMalloc(&dev_Mdm2_P_Ub_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float Mdm2_P_Ub2 = 0.000000;
float* dev_Mdm2_P_Ub2;
cudaStatus = cudaMalloc(&dev_Mdm2_P_Ub2, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Mdm2_P_Ub2, &Mdm2_P_Ub2, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Mdm2_P_Ub2_results;
Mdm2_P_Ub2_results = (float*)malloc(1000*sizeof(float));
float* dev_Mdm2_P_Ub2_results;
cudaStatus = cudaMalloc(&dev_Mdm2_P_Ub2_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float Mdm2_P_Ub3 = 0.000000;
float* dev_Mdm2_P_Ub3;
cudaStatus = cudaMalloc(&dev_Mdm2_P_Ub3, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Mdm2_P_Ub3, &Mdm2_P_Ub3, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Mdm2_P_Ub3_results;
Mdm2_P_Ub3_results = (float*)malloc(1000*sizeof(float));
float* dev_Mdm2_P_Ub3_results;
cudaStatus = cudaMalloc(&dev_Mdm2_P_Ub3_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float Mdm2_P_Ub4 = 0.000000;
float* dev_Mdm2_P_Ub4;
cudaStatus = cudaMalloc(&dev_Mdm2_P_Ub4, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Mdm2_P_Ub4, &Mdm2_P_Ub4, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Mdm2_P_Ub4_results;
Mdm2_P_Ub4_results = (float*)malloc(1000*sizeof(float));
float* dev_Mdm2_P_Ub4_results;
cudaStatus = cudaMalloc(&dev_Mdm2_P_Ub4_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float p53_Ub4_Proteasome = 0.000000;
float* dev_p53_Ub4_Proteasome;
cudaStatus = cudaMalloc(&dev_p53_Ub4_Proteasome, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_p53_Ub4_Proteasome, &p53_Ub4_Proteasome, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* p53_Ub4_Proteasome_results;
p53_Ub4_Proteasome_results = (float*)malloc(1000*sizeof(float));
float* dev_p53_Ub4_Proteasome_results;
cudaStatus = cudaMalloc(&dev_p53_Ub4_Proteasome_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float Mdm2_Ub4_Proteasome = 0.000000;
float* dev_Mdm2_Ub4_Proteasome;
cudaStatus = cudaMalloc(&dev_Mdm2_Ub4_Proteasome, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Mdm2_Ub4_Proteasome, &Mdm2_Ub4_Proteasome, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Mdm2_Ub4_Proteasome_results;
Mdm2_Ub4_Proteasome_results = (float*)malloc(1000*sizeof(float));
float* dev_Mdm2_Ub4_Proteasome_results;
cudaStatus = cudaMalloc(&dev_Mdm2_Ub4_Proteasome_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float Mdm2_P_Ub4_Proteasome = 0.000000;
float* dev_Mdm2_P_Ub4_Proteasome;
cudaStatus = cudaMalloc(&dev_Mdm2_P_Ub4_Proteasome, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Mdm2_P_Ub4_Proteasome, &Mdm2_P_Ub4_Proteasome, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Mdm2_P_Ub4_Proteasome_results;
Mdm2_P_Ub4_Proteasome_results = (float*)malloc(1000*sizeof(float));
float* dev_Mdm2_P_Ub4_Proteasome_results;
cudaStatus = cudaMalloc(&dev_Mdm2_P_Ub4_Proteasome_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float GSK3b = 500.000000;
float* dev_GSK3b;
cudaStatus = cudaMalloc(&dev_GSK3b, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_GSK3b, &GSK3b, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* GSK3b_results;
GSK3b_results = (float*)malloc(1000*sizeof(float));
float* dev_GSK3b_results;
cudaStatus = cudaMalloc(&dev_GSK3b_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float GSK3b_p53 = 0.000000;
float* dev_GSK3b_p53;
cudaStatus = cudaMalloc(&dev_GSK3b_p53, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_GSK3b_p53, &GSK3b_p53, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* GSK3b_p53_results;
GSK3b_p53_results = (float*)malloc(1000*sizeof(float));
float* dev_GSK3b_p53_results;
cudaStatus = cudaMalloc(&dev_GSK3b_p53_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float GSK3b_p53_P = 0.000000;
float* dev_GSK3b_p53_P;
cudaStatus = cudaMalloc(&dev_GSK3b_p53_P, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_GSK3b_p53_P, &GSK3b_p53_P, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* GSK3b_p53_P_results;
GSK3b_p53_P_results = (float*)malloc(1000*sizeof(float));
float* dev_GSK3b_p53_P_results;
cudaStatus = cudaMalloc(&dev_GSK3b_p53_P_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float Abeta = 0.000000;
float* dev_Abeta;
cudaStatus = cudaMalloc(&dev_Abeta, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Abeta, &Abeta, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Abeta_results;
Abeta_results = (float*)malloc(1000*sizeof(float));
float* dev_Abeta_results;
cudaStatus = cudaMalloc(&dev_Abeta_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float AggAbeta_Proteasome = 0.000000;
float* dev_AggAbeta_Proteasome;
cudaStatus = cudaMalloc(&dev_AggAbeta_Proteasome, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_AggAbeta_Proteasome, &AggAbeta_Proteasome, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* AggAbeta_Proteasome_results;
AggAbeta_Proteasome_results = (float*)malloc(1000*sizeof(float));
float* dev_AggAbeta_Proteasome_results;
cudaStatus = cudaMalloc(&dev_AggAbeta_Proteasome_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float AbetaPlaque = 0.000000;
float* dev_AbetaPlaque;
cudaStatus = cudaMalloc(&dev_AbetaPlaque, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_AbetaPlaque, &AbetaPlaque, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* AbetaPlaque_results;
AbetaPlaque_results = (float*)malloc(1000*sizeof(float));
float* dev_AbetaPlaque_results;
cudaStatus = cudaMalloc(&dev_AbetaPlaque_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float Tau = 0.000000;
float* dev_Tau;
cudaStatus = cudaMalloc(&dev_Tau, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Tau, &Tau, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Tau_results;
Tau_results = (float*)malloc(1000*sizeof(float));
float* dev_Tau_results;
cudaStatus = cudaMalloc(&dev_Tau_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float Tau_P1 = 0.000000;
float* dev_Tau_P1;
cudaStatus = cudaMalloc(&dev_Tau_P1, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Tau_P1, &Tau_P1, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Tau_P1_results;
Tau_P1_results = (float*)malloc(1000*sizeof(float));
float* dev_Tau_P1_results;
cudaStatus = cudaMalloc(&dev_Tau_P1_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float Tau_P2 = 0.000000;
float* dev_Tau_P2;
cudaStatus = cudaMalloc(&dev_Tau_P2, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Tau_P2, &Tau_P2, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Tau_P2_results;
Tau_P2_results = (float*)malloc(1000*sizeof(float));
float* dev_Tau_P2_results;
cudaStatus = cudaMalloc(&dev_Tau_P2_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float MT_Tau = 100.000000;
float* dev_MT_Tau;
cudaStatus = cudaMalloc(&dev_MT_Tau, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_MT_Tau, &MT_Tau, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* MT_Tau_results;
MT_Tau_results = (float*)malloc(1000*sizeof(float));
float* dev_MT_Tau_results;
cudaStatus = cudaMalloc(&dev_MT_Tau_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float AggTau = 0.000000;
float* dev_AggTau;
cudaStatus = cudaMalloc(&dev_AggTau, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_AggTau, &AggTau, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* AggTau_results;
AggTau_results = (float*)malloc(1000*sizeof(float));
float* dev_AggTau_results;
cudaStatus = cudaMalloc(&dev_AggTau_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float AggTau_Proteasome = 0.000000;
float* dev_AggTau_Proteasome;
cudaStatus = cudaMalloc(&dev_AggTau_Proteasome, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_AggTau_Proteasome, &AggTau_Proteasome, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* AggTau_Proteasome_results;
AggTau_Proteasome_results = (float*)malloc(1000*sizeof(float));
float* dev_AggTau_Proteasome_results;
cudaStatus = cudaMalloc(&dev_AggTau_Proteasome_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float Proteasome_Tau = 0.000000;
float* dev_Proteasome_Tau;
cudaStatus = cudaMalloc(&dev_Proteasome_Tau, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Proteasome_Tau, &Proteasome_Tau, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Proteasome_Tau_results;
Proteasome_Tau_results = (float*)malloc(1000*sizeof(float));
float* dev_Proteasome_Tau_results;
cudaStatus = cudaMalloc(&dev_Proteasome_Tau_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float PP1 = 50.000000;
float* dev_PP1;
cudaStatus = cudaMalloc(&dev_PP1, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_PP1, &PP1, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* PP1_results;
PP1_results = (float*)malloc(1000*sizeof(float));
float* dev_PP1_results;
cudaStatus = cudaMalloc(&dev_PP1_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float NFT = 0.000000;
float* dev_NFT;
cudaStatus = cudaMalloc(&dev_NFT, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_NFT, &NFT, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* NFT_results;
NFT_results = (float*)malloc(1000*sizeof(float));
float* dev_NFT_results;
cudaStatus = cudaMalloc(&dev_NFT_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float ATP = 10000.000000;
float* dev_ATP;
cudaStatus = cudaMalloc(&dev_ATP, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_ATP, &ATP, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* ATP_results;
ATP_results = (float*)malloc(1000*sizeof(float));
float* dev_ATP_results;
cudaStatus = cudaMalloc(&dev_ATP_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float ADP = 1000.000000;
float* dev_ADP;
cudaStatus = cudaMalloc(&dev_ADP, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_ADP, &ADP, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* ADP_results;
ADP_results = (float*)malloc(1000*sizeof(float));
float* dev_ADP_results;
cudaStatus = cudaMalloc(&dev_ADP_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float AMP = 1000.000000;
float* dev_AMP;
cudaStatus = cudaMalloc(&dev_AMP, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_AMP, &AMP, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* AMP_results;
AMP_results = (float*)malloc(1000*sizeof(float));
float* dev_AMP_results;
cudaStatus = cudaMalloc(&dev_AMP_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float AbetaDimer = 0.000000;
float* dev_AbetaDimer;
cudaStatus = cudaMalloc(&dev_AbetaDimer, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_AbetaDimer, &AbetaDimer, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* AbetaDimer_results;
AbetaDimer_results = (float*)malloc(1000*sizeof(float));
float* dev_AbetaDimer_results;
cudaStatus = cudaMalloc(&dev_AbetaDimer_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float AbetaPlaque_GliaA = 0.000000;
float* dev_AbetaPlaque_GliaA;
cudaStatus = cudaMalloc(&dev_AbetaPlaque_GliaA, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_AbetaPlaque_GliaA, &AbetaPlaque_GliaA, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* AbetaPlaque_GliaA_results;
AbetaPlaque_GliaA_results = (float*)malloc(1000*sizeof(float));
float* dev_AbetaPlaque_GliaA_results;
cudaStatus = cudaMalloc(&dev_AbetaPlaque_GliaA_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float GliaI = 100.000000;
float* dev_GliaI;
cudaStatus = cudaMalloc(&dev_GliaI, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_GliaI, &GliaI, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* GliaI_results;
GliaI_results = (float*)malloc(1000*sizeof(float));
float* dev_GliaI_results;
cudaStatus = cudaMalloc(&dev_GliaI_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float GliaM1 = 0.000000;
float* dev_GliaM1;
cudaStatus = cudaMalloc(&dev_GliaM1, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_GliaM1, &GliaM1, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* GliaM1_results;
GliaM1_results = (float*)malloc(1000*sizeof(float));
float* dev_GliaM1_results;
cudaStatus = cudaMalloc(&dev_GliaM1_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float GliaM2 = 0.000000;
float* dev_GliaM2;
cudaStatus = cudaMalloc(&dev_GliaM2, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_GliaM2, &GliaM2, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* GliaM2_results;
GliaM2_results = (float*)malloc(1000*sizeof(float));
float* dev_GliaM2_results;
cudaStatus = cudaMalloc(&dev_GliaM2_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float GliaA = 0.000000;
float* dev_GliaA;
cudaStatus = cudaMalloc(&dev_GliaA, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_GliaA, &GliaA, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* GliaA_results;
GliaA_results = (float*)malloc(1000*sizeof(float));
float* dev_GliaA_results;
cudaStatus = cudaMalloc(&dev_GliaA_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float antiAb = 0.000000;
float* dev_antiAb;
cudaStatus = cudaMalloc(&dev_antiAb, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_antiAb, &antiAb, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* antiAb_results;
antiAb_results = (float*)malloc(1000*sizeof(float));
float* dev_antiAb_results;
cudaStatus = cudaMalloc(&dev_antiAb_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float Abeta_antiAb = 0.000000;
float* dev_Abeta_antiAb;
cudaStatus = cudaMalloc(&dev_Abeta_antiAb, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Abeta_antiAb, &Abeta_antiAb, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Abeta_antiAb_results;
Abeta_antiAb_results = (float*)malloc(1000*sizeof(float));
float* dev_Abeta_antiAb_results;
cudaStatus = cudaMalloc(&dev_Abeta_antiAb_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float AbetaDimer_antiAb = 0.000000;
float* dev_AbetaDimer_antiAb;
cudaStatus = cudaMalloc(&dev_AbetaDimer_antiAb, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_AbetaDimer_antiAb, &AbetaDimer_antiAb, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* AbetaDimer_antiAb_results;
AbetaDimer_antiAb_results = (float*)malloc(1000*sizeof(float));
float* dev_AbetaDimer_antiAb_results;
cudaStatus = cudaMalloc(&dev_AbetaDimer_antiAb_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float degAbetaGlia = 0.000000;
float* dev_degAbetaGlia;
cudaStatus = cudaMalloc(&dev_degAbetaGlia, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_degAbetaGlia, &degAbetaGlia, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* degAbetaGlia_results;
degAbetaGlia_results = (float*)malloc(1000*sizeof(float));
float* dev_degAbetaGlia_results;
cudaStatus = cudaMalloc(&dev_degAbetaGlia_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float disaggPlaque1 = 0.000000;
float* dev_disaggPlaque1;
cudaStatus = cudaMalloc(&dev_disaggPlaque1, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_disaggPlaque1, &disaggPlaque1, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* disaggPlaque1_results;
disaggPlaque1_results = (float*)malloc(1000*sizeof(float));
float* dev_disaggPlaque1_results;
cudaStatus = cudaMalloc(&dev_disaggPlaque1_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float disaggPlaque2 = 0.000000;
float* dev_disaggPlaque2;
cudaStatus = cudaMalloc(&dev_disaggPlaque2, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_disaggPlaque2, &disaggPlaque2, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* disaggPlaque2_results;
disaggPlaque2_results = (float*)malloc(1000*sizeof(float));
float* dev_disaggPlaque2_results;
cudaStatus = cudaMalloc(&dev_disaggPlaque2_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float Source = 1.000000;
float* dev_Source;
cudaStatus = cudaMalloc(&dev_Source, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Source, &Source, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Source_results;
Source_results = (float*)malloc(1000*sizeof(float));
float* dev_Source_results;
cudaStatus = cudaMalloc(&dev_Source_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float Sink = 1.000000;
float* dev_Sink;
cudaStatus = cudaMalloc(&dev_Sink, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Sink, &Sink, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Sink_results;
Sink_results = (float*)malloc(1000*sizeof(float));
float* dev_Sink_results;
cudaStatus = cudaMalloc(&dev_Sink_results, 1000*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
