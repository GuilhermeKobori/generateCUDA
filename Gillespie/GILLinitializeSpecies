cudaError_t cudaStatus;
float* output;
float* dev_output;
output = (float*)malloc(6667*69*sizeof(float));
for(int i = 0; i < 6667*69; i++){
output[i] = 0;
}
cudaStatus = cudaMalloc(&dev_output, 6667*69*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_output, output, 6667*69*sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float host_Mdm2 = 5.0000000000;
float* dev_Mdm2;
cudaStatus = cudaMalloc(&dev_Mdm2, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Mdm2, &host_Mdm2, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Mdm2_global;
cudaStatus = cudaMalloc(&Mdm2_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_p53 = 5.0000000000;
float* dev_p53;
cudaStatus = cudaMalloc(&dev_p53, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_p53, &host_p53, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* p53_global;
cudaStatus = cudaMalloc(&p53_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_Mdm2_p53 = 95.0000000000;
float* dev_Mdm2_p53;
cudaStatus = cudaMalloc(&dev_Mdm2_p53, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Mdm2_p53, &host_Mdm2_p53, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Mdm2_p53_global;
cudaStatus = cudaMalloc(&Mdm2_p53_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_Mdm2_mRNA = 10.0000000000;
float* dev_Mdm2_mRNA;
cudaStatus = cudaMalloc(&dev_Mdm2_mRNA, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Mdm2_mRNA, &host_Mdm2_mRNA, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Mdm2_mRNA_global;
cudaStatus = cudaMalloc(&Mdm2_mRNA_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_p53_mRNA = 10.0000000000;
float* dev_p53_mRNA;
cudaStatus = cudaMalloc(&dev_p53_mRNA, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_p53_mRNA, &host_p53_mRNA, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* p53_mRNA_global;
cudaStatus = cudaMalloc(&p53_mRNA_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_ATMA = 0.0000000000;
float* dev_ATMA;
cudaStatus = cudaMalloc(&dev_ATMA, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_ATMA, &host_ATMA, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* ATMA_global;
cudaStatus = cudaMalloc(&ATMA_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_ATMI = 200.0000000000;
float* dev_ATMI;
cudaStatus = cudaMalloc(&dev_ATMI, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_ATMI, &host_ATMI, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* ATMI_global;
cudaStatus = cudaMalloc(&ATMI_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_p53_P = 0.0000000000;
float* dev_p53_P;
cudaStatus = cudaMalloc(&dev_p53_P, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_p53_P, &host_p53_P, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* p53_P_global;
cudaStatus = cudaMalloc(&p53_P_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_Mdm2_P = 0.0000000000;
float* dev_Mdm2_P;
cudaStatus = cudaMalloc(&dev_Mdm2_P, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Mdm2_P, &host_Mdm2_P, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Mdm2_P_global;
cudaStatus = cudaMalloc(&Mdm2_P_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_IR = 0.0000000000;
float* dev_IR;
cudaStatus = cudaMalloc(&dev_IR, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_IR, &host_IR, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* IR_global;
cudaStatus = cudaMalloc(&IR_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_ROS = 0.0000000000;
float* dev_ROS;
cudaStatus = cudaMalloc(&dev_ROS, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_ROS, &host_ROS, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* ROS_global;
cudaStatus = cudaMalloc(&ROS_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_damDNA = 0.0000000000;
float* dev_damDNA;
cudaStatus = cudaMalloc(&dev_damDNA, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_damDNA, &host_damDNA, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* damDNA_global;
cudaStatus = cudaMalloc(&damDNA_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_E1 = 100.0000000000;
float* dev_E1;
cudaStatus = cudaMalloc(&dev_E1, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_E1, &host_E1, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* E1_global;
cudaStatus = cudaMalloc(&E1_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_E2 = 100.0000000000;
float* dev_E2;
cudaStatus = cudaMalloc(&dev_E2, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_E2, &host_E2, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* E2_global;
cudaStatus = cudaMalloc(&E2_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_E1_Ub = 0.0000000000;
float* dev_E1_Ub;
cudaStatus = cudaMalloc(&dev_E1_Ub, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_E1_Ub, &host_E1_Ub, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* E1_Ub_global;
cudaStatus = cudaMalloc(&E1_Ub_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_E2_Ub = 0.0000000000;
float* dev_E2_Ub;
cudaStatus = cudaMalloc(&dev_E2_Ub, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_E2_Ub, &host_E2_Ub, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* E2_Ub_global;
cudaStatus = cudaMalloc(&E2_Ub_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_Proteasome = 500.0000000000;
float* dev_Proteasome;
cudaStatus = cudaMalloc(&dev_Proteasome, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Proteasome, &host_Proteasome, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Proteasome_global;
cudaStatus = cudaMalloc(&Proteasome_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_Ub = 4000.0000000000;
float* dev_Ub;
cudaStatus = cudaMalloc(&dev_Ub, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Ub, &host_Ub, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Ub_global;
cudaStatus = cudaMalloc(&Ub_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_p53DUB = 200.0000000000;
float* dev_p53DUB;
cudaStatus = cudaMalloc(&dev_p53DUB, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_p53DUB, &host_p53DUB, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* p53DUB_global;
cudaStatus = cudaMalloc(&p53DUB_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_Mdm2DUB = 200.0000000000;
float* dev_Mdm2DUB;
cudaStatus = cudaMalloc(&dev_Mdm2DUB, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Mdm2DUB, &host_Mdm2DUB, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Mdm2DUB_global;
cudaStatus = cudaMalloc(&Mdm2DUB_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_DUB = 200.0000000000;
float* dev_DUB;
cudaStatus = cudaMalloc(&dev_DUB, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_DUB, &host_DUB, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* DUB_global;
cudaStatus = cudaMalloc(&DUB_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_Mdm2_p53_Ub = 0.0000000000;
float* dev_Mdm2_p53_Ub;
cudaStatus = cudaMalloc(&dev_Mdm2_p53_Ub, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Mdm2_p53_Ub, &host_Mdm2_p53_Ub, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Mdm2_p53_Ub_global;
cudaStatus = cudaMalloc(&Mdm2_p53_Ub_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_Mdm2_p53_Ub2 = 0.0000000000;
float* dev_Mdm2_p53_Ub2;
cudaStatus = cudaMalloc(&dev_Mdm2_p53_Ub2, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Mdm2_p53_Ub2, &host_Mdm2_p53_Ub2, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Mdm2_p53_Ub2_global;
cudaStatus = cudaMalloc(&Mdm2_p53_Ub2_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_Mdm2_p53_Ub3 = 0.0000000000;
float* dev_Mdm2_p53_Ub3;
cudaStatus = cudaMalloc(&dev_Mdm2_p53_Ub3, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Mdm2_p53_Ub3, &host_Mdm2_p53_Ub3, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Mdm2_p53_Ub3_global;
cudaStatus = cudaMalloc(&Mdm2_p53_Ub3_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_Mdm2_p53_Ub4 = 0.0000000000;
float* dev_Mdm2_p53_Ub4;
cudaStatus = cudaMalloc(&dev_Mdm2_p53_Ub4, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Mdm2_p53_Ub4, &host_Mdm2_p53_Ub4, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Mdm2_p53_Ub4_global;
cudaStatus = cudaMalloc(&Mdm2_p53_Ub4_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_Mdm2_P1_p53_Ub4 = 0.0000000000;
float* dev_Mdm2_P1_p53_Ub4;
cudaStatus = cudaMalloc(&dev_Mdm2_P1_p53_Ub4, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Mdm2_P1_p53_Ub4, &host_Mdm2_P1_p53_Ub4, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Mdm2_P1_p53_Ub4_global;
cudaStatus = cudaMalloc(&Mdm2_P1_p53_Ub4_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_Mdm2_Ub = 0.0000000000;
float* dev_Mdm2_Ub;
cudaStatus = cudaMalloc(&dev_Mdm2_Ub, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Mdm2_Ub, &host_Mdm2_Ub, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Mdm2_Ub_global;
cudaStatus = cudaMalloc(&Mdm2_Ub_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_Mdm2_Ub2 = 0.0000000000;
float* dev_Mdm2_Ub2;
cudaStatus = cudaMalloc(&dev_Mdm2_Ub2, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Mdm2_Ub2, &host_Mdm2_Ub2, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Mdm2_Ub2_global;
cudaStatus = cudaMalloc(&Mdm2_Ub2_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_Mdm2_Ub3 = 0.0000000000;
float* dev_Mdm2_Ub3;
cudaStatus = cudaMalloc(&dev_Mdm2_Ub3, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Mdm2_Ub3, &host_Mdm2_Ub3, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Mdm2_Ub3_global;
cudaStatus = cudaMalloc(&Mdm2_Ub3_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_Mdm2_Ub4 = 0.0000000000;
float* dev_Mdm2_Ub4;
cudaStatus = cudaMalloc(&dev_Mdm2_Ub4, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Mdm2_Ub4, &host_Mdm2_Ub4, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Mdm2_Ub4_global;
cudaStatus = cudaMalloc(&Mdm2_Ub4_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_Mdm2_P_Ub = 0.0000000000;
float* dev_Mdm2_P_Ub;
cudaStatus = cudaMalloc(&dev_Mdm2_P_Ub, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Mdm2_P_Ub, &host_Mdm2_P_Ub, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Mdm2_P_Ub_global;
cudaStatus = cudaMalloc(&Mdm2_P_Ub_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_Mdm2_P_Ub2 = 0.0000000000;
float* dev_Mdm2_P_Ub2;
cudaStatus = cudaMalloc(&dev_Mdm2_P_Ub2, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Mdm2_P_Ub2, &host_Mdm2_P_Ub2, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Mdm2_P_Ub2_global;
cudaStatus = cudaMalloc(&Mdm2_P_Ub2_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_Mdm2_P_Ub3 = 0.0000000000;
float* dev_Mdm2_P_Ub3;
cudaStatus = cudaMalloc(&dev_Mdm2_P_Ub3, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Mdm2_P_Ub3, &host_Mdm2_P_Ub3, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Mdm2_P_Ub3_global;
cudaStatus = cudaMalloc(&Mdm2_P_Ub3_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_Mdm2_P_Ub4 = 0.0000000000;
float* dev_Mdm2_P_Ub4;
cudaStatus = cudaMalloc(&dev_Mdm2_P_Ub4, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Mdm2_P_Ub4, &host_Mdm2_P_Ub4, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Mdm2_P_Ub4_global;
cudaStatus = cudaMalloc(&Mdm2_P_Ub4_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_p53_Ub4_Proteasome = 0.0000000000;
float* dev_p53_Ub4_Proteasome;
cudaStatus = cudaMalloc(&dev_p53_Ub4_Proteasome, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_p53_Ub4_Proteasome, &host_p53_Ub4_Proteasome, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* p53_Ub4_Proteasome_global;
cudaStatus = cudaMalloc(&p53_Ub4_Proteasome_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_Mdm2_Ub4_Proteasome = 0.0000000000;
float* dev_Mdm2_Ub4_Proteasome;
cudaStatus = cudaMalloc(&dev_Mdm2_Ub4_Proteasome, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Mdm2_Ub4_Proteasome, &host_Mdm2_Ub4_Proteasome, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Mdm2_Ub4_Proteasome_global;
cudaStatus = cudaMalloc(&Mdm2_Ub4_Proteasome_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_Mdm2_P_Ub4_Proteasome = 0.0000000000;
float* dev_Mdm2_P_Ub4_Proteasome;
cudaStatus = cudaMalloc(&dev_Mdm2_P_Ub4_Proteasome, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Mdm2_P_Ub4_Proteasome, &host_Mdm2_P_Ub4_Proteasome, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Mdm2_P_Ub4_Proteasome_global;
cudaStatus = cudaMalloc(&Mdm2_P_Ub4_Proteasome_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_GSK3b = 500.0000000000;
float* dev_GSK3b;
cudaStatus = cudaMalloc(&dev_GSK3b, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_GSK3b, &host_GSK3b, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* GSK3b_global;
cudaStatus = cudaMalloc(&GSK3b_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_GSK3b_p53 = 0.0000000000;
float* dev_GSK3b_p53;
cudaStatus = cudaMalloc(&dev_GSK3b_p53, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_GSK3b_p53, &host_GSK3b_p53, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* GSK3b_p53_global;
cudaStatus = cudaMalloc(&GSK3b_p53_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_GSK3b_p53_P = 0.0000000000;
float* dev_GSK3b_p53_P;
cudaStatus = cudaMalloc(&dev_GSK3b_p53_P, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_GSK3b_p53_P, &host_GSK3b_p53_P, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* GSK3b_p53_P_global;
cudaStatus = cudaMalloc(&GSK3b_p53_P_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_Abeta = 0.0000000000;
float* dev_Abeta;
cudaStatus = cudaMalloc(&dev_Abeta, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Abeta, &host_Abeta, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Abeta_global;
cudaStatus = cudaMalloc(&Abeta_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_AggAbeta_Proteasome = 0.0000000000;
float* dev_AggAbeta_Proteasome;
cudaStatus = cudaMalloc(&dev_AggAbeta_Proteasome, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_AggAbeta_Proteasome, &host_AggAbeta_Proteasome, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* AggAbeta_Proteasome_global;
cudaStatus = cudaMalloc(&AggAbeta_Proteasome_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_AbetaPlaque = 0.0000000000;
float* dev_AbetaPlaque;
cudaStatus = cudaMalloc(&dev_AbetaPlaque, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_AbetaPlaque, &host_AbetaPlaque, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* AbetaPlaque_global;
cudaStatus = cudaMalloc(&AbetaPlaque_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_Tau = 0.0000000000;
float* dev_Tau;
cudaStatus = cudaMalloc(&dev_Tau, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Tau, &host_Tau, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Tau_global;
cudaStatus = cudaMalloc(&Tau_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_Tau_P1 = 0.0000000000;
float* dev_Tau_P1;
cudaStatus = cudaMalloc(&dev_Tau_P1, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Tau_P1, &host_Tau_P1, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Tau_P1_global;
cudaStatus = cudaMalloc(&Tau_P1_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_Tau_P2 = 0.0000000000;
float* dev_Tau_P2;
cudaStatus = cudaMalloc(&dev_Tau_P2, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Tau_P2, &host_Tau_P2, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Tau_P2_global;
cudaStatus = cudaMalloc(&Tau_P2_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_MT_Tau = 100.0000000000;
float* dev_MT_Tau;
cudaStatus = cudaMalloc(&dev_MT_Tau, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_MT_Tau, &host_MT_Tau, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* MT_Tau_global;
cudaStatus = cudaMalloc(&MT_Tau_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_AggTau = 0.0000000000;
float* dev_AggTau;
cudaStatus = cudaMalloc(&dev_AggTau, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_AggTau, &host_AggTau, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* AggTau_global;
cudaStatus = cudaMalloc(&AggTau_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_AggTau_Proteasome = 0.0000000000;
float* dev_AggTau_Proteasome;
cudaStatus = cudaMalloc(&dev_AggTau_Proteasome, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_AggTau_Proteasome, &host_AggTau_Proteasome, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* AggTau_Proteasome_global;
cudaStatus = cudaMalloc(&AggTau_Proteasome_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_Proteasome_Tau = 0.0000000000;
float* dev_Proteasome_Tau;
cudaStatus = cudaMalloc(&dev_Proteasome_Tau, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Proteasome_Tau, &host_Proteasome_Tau, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Proteasome_Tau_global;
cudaStatus = cudaMalloc(&Proteasome_Tau_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_PP1 = 50.0000000000;
float* dev_PP1;
cudaStatus = cudaMalloc(&dev_PP1, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_PP1, &host_PP1, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* PP1_global;
cudaStatus = cudaMalloc(&PP1_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_NFT = 0.0000000000;
float* dev_NFT;
cudaStatus = cudaMalloc(&dev_NFT, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_NFT, &host_NFT, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* NFT_global;
cudaStatus = cudaMalloc(&NFT_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_ATP = 10000.0000000000;
float* dev_ATP;
cudaStatus = cudaMalloc(&dev_ATP, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_ATP, &host_ATP, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* ATP_global;
cudaStatus = cudaMalloc(&ATP_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_ADP = 1000.0000000000;
float* dev_ADP;
cudaStatus = cudaMalloc(&dev_ADP, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_ADP, &host_ADP, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* ADP_global;
cudaStatus = cudaMalloc(&ADP_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_AMP = 1000.0000000000;
float* dev_AMP;
cudaStatus = cudaMalloc(&dev_AMP, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_AMP, &host_AMP, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* AMP_global;
cudaStatus = cudaMalloc(&AMP_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_AbetaDimer = 0.0000000000;
float* dev_AbetaDimer;
cudaStatus = cudaMalloc(&dev_AbetaDimer, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_AbetaDimer, &host_AbetaDimer, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* AbetaDimer_global;
cudaStatus = cudaMalloc(&AbetaDimer_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_AbetaPlaque_GliaA = 0.0000000000;
float* dev_AbetaPlaque_GliaA;
cudaStatus = cudaMalloc(&dev_AbetaPlaque_GliaA, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_AbetaPlaque_GliaA, &host_AbetaPlaque_GliaA, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* AbetaPlaque_GliaA_global;
cudaStatus = cudaMalloc(&AbetaPlaque_GliaA_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_GliaI = 100.0000000000;
float* dev_GliaI;
cudaStatus = cudaMalloc(&dev_GliaI, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_GliaI, &host_GliaI, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* GliaI_global;
cudaStatus = cudaMalloc(&GliaI_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_GliaM1 = 0.0000000000;
float* dev_GliaM1;
cudaStatus = cudaMalloc(&dev_GliaM1, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_GliaM1, &host_GliaM1, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* GliaM1_global;
cudaStatus = cudaMalloc(&GliaM1_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_GliaM2 = 0.0000000000;
float* dev_GliaM2;
cudaStatus = cudaMalloc(&dev_GliaM2, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_GliaM2, &host_GliaM2, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* GliaM2_global;
cudaStatus = cudaMalloc(&GliaM2_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_GliaA = 0.0000000000;
float* dev_GliaA;
cudaStatus = cudaMalloc(&dev_GliaA, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_GliaA, &host_GliaA, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* GliaA_global;
cudaStatus = cudaMalloc(&GliaA_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_antiAb = 0.0000000000;
float* dev_antiAb;
cudaStatus = cudaMalloc(&dev_antiAb, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_antiAb, &host_antiAb, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* antiAb_global;
cudaStatus = cudaMalloc(&antiAb_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_Abeta_antiAb = 0.0000000000;
float* dev_Abeta_antiAb;
cudaStatus = cudaMalloc(&dev_Abeta_antiAb, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Abeta_antiAb, &host_Abeta_antiAb, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Abeta_antiAb_global;
cudaStatus = cudaMalloc(&Abeta_antiAb_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_AbetaDimer_antiAb = 0.0000000000;
float* dev_AbetaDimer_antiAb;
cudaStatus = cudaMalloc(&dev_AbetaDimer_antiAb, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_AbetaDimer_antiAb, &host_AbetaDimer_antiAb, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* AbetaDimer_antiAb_global;
cudaStatus = cudaMalloc(&AbetaDimer_antiAb_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_degAbetaGlia = 0.0000000000;
float* dev_degAbetaGlia;
cudaStatus = cudaMalloc(&dev_degAbetaGlia, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_degAbetaGlia, &host_degAbetaGlia, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* degAbetaGlia_global;
cudaStatus = cudaMalloc(&degAbetaGlia_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_disaggPlaque1 = 0.0000000000;
float* dev_disaggPlaque1;
cudaStatus = cudaMalloc(&dev_disaggPlaque1, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_disaggPlaque1, &host_disaggPlaque1, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* disaggPlaque1_global;
cudaStatus = cudaMalloc(&disaggPlaque1_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_disaggPlaque2 = 0.0000000000;
float* dev_disaggPlaque2;
cudaStatus = cudaMalloc(&dev_disaggPlaque2, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_disaggPlaque2, &host_disaggPlaque2, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* disaggPlaque2_global;
cudaStatus = cudaMalloc(&disaggPlaque2_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_Source = 1.0000000000;
float* dev_Source;
cudaStatus = cudaMalloc(&dev_Source, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Source, &host_Source, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Source_global;
cudaStatus = cudaMalloc(&Source_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
float host_Sink = 1.0000000000;
float* dev_Sink;
cudaStatus = cudaMalloc(&dev_Sink, sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
cudaStatus = cudaMemcpy(dev_Sink, &host_Sink, sizeof(float), cudaMemcpyHostToDevice);
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMemcpy failed!");goto Error;}
float* Sink_global;
cudaStatus = cudaMalloc(&Sink_global, 32*sizeof(float));
if (cudaStatus != cudaSuccess) {fprintf(stderr, "cudaMalloc failed!");goto Error;}
